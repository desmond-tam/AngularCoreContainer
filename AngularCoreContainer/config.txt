 public windowLogin() {
    const nounce = this.guid();
    const state = this.guid();
    this._storage.nonce = nounce;
    this._storage.state = state;
    window.location.href = `${this._settings.Authentication.microsoftLoginUrl}${this._settings.Authentication.tenant}/oauth2/authorize?client_id=${this._settings.Authentication.clientId}&response_type=token+id_token&resource=${this._settings.Authentication.graphResource}&state=${state}&nonce=insert-nonce&redirect_uri=${this._settings.Authentication.auth0.redirectUrl}`;
  }


  public windowLogout() {

      window.location.href = `${this._settings.Authentication.microsoftLoginUrl}${this._settings.Authentication.tenant}/oauth2/logout?post_logout_redirect_uri=${this._settings.Authentication.auth0.redirectUrl}`;

  }

 private guid() {
    var buf = new Uint16Array(8);
    this._cryptObj.getRandomValues(buf);
    function s4(num) {
      var ret = num.toString(16); 
      while (ret.length < 4) {
        ret = '0' + ret;
      }
      return ret;
    }
    return s4(buf[0]) + s4(buf[1]) + '-' + s4(buf[2]) + '-' + s4(buf[3]) + '-' +
      s4(buf[4]) + '-' + s4(buf[5]) + s4(buf[6]) + s4(buf[7]);
  }


export const authentication = {
  clientId: 'tttt-31cf-4833-b648-92b9560b4443',
  graphResource: 'https://graph.windows.net',
  microsoftLoginUrl: 'https://login.microsoftonline.com/',
  redirectUrl: 'https://localhost:4200/',
  tenant: 'eeeeee-14c8-4b16-8f23-bd7b55354dcb'
 
};





  
import { Injectable, isDevMode, OnInit } from '@angular/core';
import { Component } from '@angular/core';
import { sp } from '@pnp/sp';
import { loadPageContext } from 'sp-rest-proxy/dist/utils/env';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'Angular 5 - @PnP - SP Prest Proxy';

  siteUrl = '';
  accountName = '';
  displayName = '';
  email = '';
  webTitle = '';
  constructor() {
    if (isDevMode()) {
      this.siteUrl = 'http://localhost:8082';
      console.log('Running in Developer Environment. SharePoint Rest Endpoint:' + this.siteUrl);
    } else {
      this.siteUrl = (<any>window)._spPageContextInfo.siteAbsoluteUrl;
      console.log('Running in Production Environment. SharePoint Rest Endpoint:' + this.siteUrl);
    }

    sp.setup({
      sp: {

        baseUrl: this.siteUrl,
        headers: {
          'Accept': 'application/json;odata=verbose'
        }
      }
    }
    );


  }
  ngOnInit() {
    // Using @Pnp Library
    sp.profiles.myProperties
      .get()
      .then((response) => {
        this.accountName = response.AccountName;
        this.displayName = response.DisplayName;
        this.email = response.Email;
      }).catch((error) => {
        console.log(error);
      });

    // Using SP Proxy
    loadPageContext().then(async _ => {
      this.webTitle = _spPageContextInfo.webTitle;

    }).catch((error) => {
      console.log(error);
    });
  }
}
Â© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
